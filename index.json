[{"categories":null,"contents":"Informativa su Privacy e Dati Personali Privacy - Gestione dei Dati Personali Montelli Francesco effettua il trattamento dei tuoi dati in ottemperanza al Regolamento europeo (UE) 2016/679 relativo alla protezione delle persone fisiche con riguardo al trattamento dei dati personali.\nSecondo la vigente normativa europea in materia di Cookies, tutti i siti sono tenuti a informare l\u0026rsquo;utente riguardo l\u0026rsquo;utilizzo dei Cookie presenti nel sito stesso.\nTitolare e Responsabile del Trattamento dei Dati Il titolare e il responsabile del trattamento dei dati raccolti su questo sito è Montelli Francesco.\nTipi di Dati Trattati Dati di Navigazione I sistemi informatici e le procedure software preposte al funzionamento del sito acquisiscono, nel corso del loro normale esercizio, alcuni dati la cui trasmissione è implicita nell\u0026rsquo;uso dei protocolli di comunicazione di Internet. Montelli Francesco non raccoglie mai tali dati in forma che consenta di identificare gli utenti.\nIn questa categoria di dati rientrano:\nGli indirizzi IP o i nomi a dominio dei computer utilizzati dagli utenti che si connettono al sito Gli indirizzi in notazione URI (Uniform Resource Identifier) delle risorse richieste L\u0026rsquo;orario della richiesta Il metodo utilizzato nel sottoporre la richiesta al server La dimensione del file ottenuto in risposta Il codice numerico indicante lo stato della risposta data dal server (buon fine, errore, ecc.) Altri parametri relativi al sistema operativo e all\u0026rsquo;ambiente informatico dell\u0026rsquo;utente Questi dati vengono utilizzati esclusivamente in forma anonima e per finalità statistiche connesse all\u0026rsquo;uso del sito e al suo corretto funzionamento.\nDati Forniti Volontariamente dall\u0026rsquo;Utente La raccolta di dati personali degli utenti può avvenire in maniera volontaria, attraverso:\nL\u0026rsquo;invio di posta elettronica agli indirizzi riportati sul sito La spedizione dei moduli elettronici presenti sullo stesso da parte degli utenti L\u0026rsquo;invio di posta elettronica comporta la raccolta, da parte del Titolare, dell\u0026rsquo;indirizzo email del mittente, necessario per rispondere alla richiesta, nonché degli eventuali altri dati personali contenuti nella comunicazione. I dati personali raccolti attraverso questa modalità verranno utilizzati dal Titolare al solo fine di rispondere al messaggio di posta elettronica ricevuto e per eventuali successive comunicazioni correlate.\nLa spedizione di moduli per la richiesta informazioni comporta la raccolta di informazioni inviate tramite i moduli.\nInformazioni Generali sui Cookie Quando accedi a un sito, esso o siti ad esso correlati potrebbero impostare o leggere cookie e/o altri tipi di identificatori circa il browser e/o il dispositivo che stai utilizzando.\nUn cookie è un piccolo file di testo che viene memorizzato sul computer di chi visualizza un sito web allo scopo di registrare alcune informazioni relative alla visita nonché di creare un sistema per riconoscere l\u0026rsquo;utente anche in momenti successivi. Gli identificatori dei dispositivi, invece, vengono generati raccogliendo ed elaborando alcune informazioni come l\u0026rsquo;indirizzo IP e/o lo user agent (versione del browser, tipo e versione del sistema operativo) o altre caratteristiche del dispositivo, sempre al fine di ricollegare talune informazioni ad un utente specifico.\nUn sito Web può impostare un cookie sul browser solo se le preferenze configurate per quest\u0026rsquo;ultimo lo consentono. È importante sapere che un browser può consentire a un determinato sito Web di accedere solo ed esclusivamente ai cookie da esso impostati e non a quelli impostati da altri siti Web: non vi è alcun rischio per la vostra privacy in tal senso.\nUso dei Cookie Questo sito utilizza i Cookie per rendere i propri servizi semplici e efficienti per l\u0026rsquo;utenza che visiona le pagine.\nTipologie di Cookie Utilizzati A seguire i vari tipi di cookie utilizzati da questo sito in funzione delle finalità d\u0026rsquo;uso:\nCookie Tecnici Questa tipologia di cookie permette il corretto funzionamento di alcune sezioni del sito. Sono di due categorie:\nPersistenti: una volta chiuso il browser non vengono distrutti ma rimangono fino ad una data di scadenza preimpostata Di sessione: vengono distrutti ogni volta che il browser viene chiuso Questi cookie, inviati sempre dal nostro dominio, sono necessari a visualizzare correttamente il sito e in relazione ai servizi tecnici offerti, verranno quindi sempre utilizzati e inviati, a meno che l\u0026rsquo;utenza non modifichi le impostazioni nel proprio browser (inficiando così la visualizzazione delle pagine del sito).\nCookie Analitici I cookie in questa categoria vengono utilizzati per collezionare informazioni sull\u0026rsquo;uso del sito. Si tratta di informazioni in merito ad analisi statistiche anonime. Questa tipologia di cookie raccoglie dati in forma anonima sull\u0026rsquo;attività dell\u0026rsquo;utenza e su come è arrivata sul sito. I cookie analitici sono inviati dal sito stesso.\nConsenso ai Cookie Questo sito, secondo la normativa vigente, non è tenuto a chiedere consenso per i cookie tecnici e analitici.\nPer tutte le altre tipologie di cookie il consenso può essere espresso dall\u0026rsquo;Utente con una o più di una delle seguenti modalità:\nMediante specifiche configurazioni del browser utilizzato o dei relativi programmi informatici utilizzati per navigare le pagine che compongono il sito Mediante modifica delle impostazioni nell\u0026rsquo;uso dei servizi di terze parti Entrambe queste soluzioni potrebbero impedire all\u0026rsquo;utente di utilizzare o visualizzare parti del sito.\n","date":"July 19, 2025","hero":"/images/default-hero.jpg","permalink":"https://hugo-toha.github.io/privacy/","summary":"\u003ch1 id=\"informativa-su-privacy-e-dati-personali\"\u003eInformativa su Privacy e Dati Personali\u003c/h1\u003e\n\u003ch2 id=\"privacy---gestione-dei-dati-personali\"\u003ePrivacy - Gestione dei Dati Personali\u003c/h2\u003e\n\u003cp\u003eMontelli Francesco effettua il trattamento dei tuoi dati in ottemperanza al Regolamento europeo (UE) 2016/679 relativo alla protezione delle persone fisiche con riguardo al trattamento dei dati personali.\u003c/p\u003e\n\u003cp\u003eSecondo la vigente normativa europea in materia di Cookies, tutti i siti sono tenuti a informare l\u0026rsquo;utente riguardo l\u0026rsquo;utilizzo dei Cookie presenti nel sito stesso.\u003c/p\u003e\n\u003ch2 id=\"titolare-e-responsabile-del-trattamento-dei-dati\"\u003eTitolare e Responsabile del Trattamento dei Dati\u003c/h2\u003e\n\u003cp\u003eIl titolare e il responsabile del trattamento dei dati raccolti su questo sito è \u003cstrong\u003eMontelli Francesco\u003c/strong\u003e.\u003c/p\u003e","tags":null,"title":"Privacy Policy"},{"categories":["Basic"],"contents":"Docker e Linux Namespaces: Guida Completa alla Containerizzazione Pubblicato in Marzo 2025 - di Francesco Montelli\nLa containerizzazione ha rivoluzionato il modo in cui sviluppiamo e distribuiamo le applicazioni. In questo articolo esploreremo Docker e i meccanismi fondamentali che rendono possibile l\u0026rsquo;isolamento dei container: i namespaces e i cgroups di Linux.\nCos\u0026rsquo;è Docker? Docker è una piattaforma open-source che semplifica lo sviluppo, la distribuzione e l\u0026rsquo;esecuzione delle applicazioni tramite l\u0026rsquo;uso di container. Un container è un\u0026rsquo;astrazione che permette di racchiudere un\u0026rsquo;applicazione e tutte le sue dipendenze in un ambiente isolato e portatile, eliminando le incompatibilità dovute alle differenti configurazioni dei sistemi host.\nCaratteristiche Principali Isolamento e Portabilità: Ogni container contiene tutto il necessario per eseguire l\u0026rsquo;applicazione, garantendo che il software venga eseguito sempre allo stesso modo su qualsiasi infrastruttura.\nEfficienza e Leggerezza: I container offrono un consumo minore di risorse rispetto alle tradizionali macchine virtuali, condividendo il kernel dell\u0026rsquo;host.\nUniformità di Gestione: Il container diventa la nuova \u0026ldquo;unità fondamentale\u0026rdquo; durante il ciclo di vita dell\u0026rsquo;applicativo, riducendo il tempo che intercorre tra la scrittura del codice e la messa in esercizio.\nCasi d\u0026rsquo;Uso Principali 1. Rilascio Rapido e Coerente delle Applicazioni Docker elimina il problema del \u0026ldquo;funziona sulla mia macchina\u0026rdquo; attraverso:\nSviluppo in ambienti isolati: Ogni sviluppatore lavora in un ambiente standardizzato Testing uniforme: I container sono identici in ogni ambiente, garantendo test affidabili Aggiornamenti rapidi: Le modifiche possono essere immediatamente testate e distribuite 2. Deploy e Scalabilità Reattivi La flessibilità di Docker si manifesta in:\nPortabilità totale: I container possono essere eseguiti su qualsiasi infrastruttura (PC, server fisici, macchine virtuali, cloud, ambienti ibridi) Scalabilità dinamica: Possibilità di avviare o terminare istanze in tempo reale per rispondere alle variazioni del carico 3. Massimizzazione delle Risorse Hardware L\u0026rsquo;efficienza dei container permette:\nMaggiore densità: Numerosi container possono essere eseguiti sullo stesso server Riduzione dei costi: Uso più efficiente dell\u0026rsquo;hardware si traduce in minori costi infrastrutturali Integrazione DevOps e CI/CD Docker si integra perfettamente nei flussi di lavoro moderni:\nAutomazione completa: Dal coding al deployment, tutto può essere automatizzato Coerenza ambientale: Lo stesso container viene utilizzato in sviluppo, test e produzione Architettura Docker L\u0026rsquo;architettura di Docker si basa su tre componenti principali:\nDocker Client L\u0026rsquo;interfaccia primaria per interagire con Docker. Il comando docker invia le richieste al Docker daemon e può comunicare con più daemon contemporaneamente.\nDocker Host Il sistema su cui gira il Docker daemon (dockerd), responsabile di:\nAscoltare le richieste API Gestire gli oggetti Docker (immagini, container, reti, volumi) Coordinare i servizi distribuiti Docker Registry Il sistema di archiviazione e distribuzione delle immagini Docker. Docker Hub è il registry pubblico predefinito, ma è possibile configurare registry privati.\nFlusso di Esecuzione di un Container Quando eseguiamo docker run, Docker:\nVerifica l\u0026rsquo;immagine: Controlla se è disponibile localmente, altrimenti la scarica dal registry Crea il container: Istanzia un nuovo container basato sull\u0026rsquo;immagine Alloca il filesystem: Assegna un filesystem in scrittura come layer aggiuntivo Configura la rete: Imposta l\u0026rsquo;indirizzo IP e la connessione di rete Esegue il comando: Avvia il processo specificato Docker vs Virtual Machine La differenza fondamentale tra containerizzazione e virtualizzazione risiede nell\u0026rsquo;architettura:\nVirtualizzazione: Crea macchine virtuali complete con proprio sistema operativo tramite hypervisor. Offre isolamento rigoroso ma con overhead elevato.\nContainerizzazione: I container condividono il kernel dell\u0026rsquo;host, isolandosi tramite namespaces e cgroups. Riduce drasticamente l\u0026rsquo;overhead ma offre isolamento meno robusto.\nQuesta scelta architettuale determina un compromesso tra sicurezza/isolamento completo e agilità/efficienza.\nLinux Namespaces: Il Cuore dell\u0026rsquo;Isolamento I namespaces sono un meccanismo del kernel Linux che permette di creare ambienti isolati per processi e risorse. Ogni processo può avere una visione limitata del sistema, accedendo solo alle risorse assegnate.\nTipi di Namespace Linux supporta otto tipi di namespace:\nMount (mnt): Isola i punti di montaggio dei filesystem Process ID (pid): Separa gli ID di processo Network (net): Isola le risorse di rete Interprocess Communication (ipc): Separa le risorse IPC UTS (uts): Permette di modificare hostname e domain name User (user): Fornisce separazione tra ID utente e gruppo Cgroup (cgroup): Isola la visibilità dei gruppi di controllo Time (time): Consente separazione degli orologi di sistema PID Namespace I namespace PID permettono di isolare i processi, assegnando identificativi distinti. Caratteristiche principali:\nOrganizzazione gerarchica: ogni namespace ha un padre Visibilità: i processi sono visibili dai namespace superiori Mappatura: un processo può avere PID diversi in namespace diversi Questo è fondamentale per i container, permettendo a ogni istanza di avere il proprio processo init con PID 1.\nNetwork Namespace L\u0026rsquo;isolamento delle risorse di rete consente a ciascun namespace di avere il proprio stack di rete indipendente:\nSicurezza: Impedisce accessi non autorizzati alla rete dell\u0026rsquo;host Port mapping: Docker usa questo meccanismo per mappare le porte Reti virtuali: Possibilità di creare reti condivise tra gruppi di processi CGroups: Controllo delle Risorse I cgroups (control groups) sono una funzionalità del kernel Linux che consente di limitare, monitorare e isolare l\u0026rsquo;uso delle risorse di sistema tra gruppi di processi.\nRisorse Gestibili Memoria: Limiti soft e hard, controllo dello swap CPU: Monitoring e throttling del consumo Block I/O: Controllo delle operazioni di lettura/scrittura Network: Limitazione del traffico di rete Device: Controllo dell\u0026rsquo;accesso ai dispositivi Interfaccia Filesystem I cgroups sono gestiti tramite un\u0026rsquo;interfaccia filesystem, tipicamente in /sys/fs/cgroup/. Ogni gerarchia corrisponde a una directory con file speciali per configurare limiti e ottenere statistiche.\nDemo Pratiche Demo 1: PID Namespaces in Azione Questa demo dimostra che i container sono semplicemente processi nel sistema host:\n# 1. Avviare un container Ubuntu docker run -it ubuntu bash # 2. Nel container, eseguire un processo watch ps aux # 3. Dall\u0026#39;host, trovare il processo ps aux | grep watch # 4. Visualizzare la catena dei processi pstree -s \u0026lt;PID\u0026gt; # 5. Verificare il mapping dei PID grep NSpid /proc/\u0026lt;PID\u0026gt;/status # 6. Terminare il processo dall\u0026#39;host kill \u0026lt;PID\u0026gt; Demo 2: Network Namespace Questa demo mostra il funzionamento del port mapping:\n# 1. Avviare container con port mapping docker run -d -p 9090:8080 --name net-demo python:3 python -m http.server 8080 # 2. Verificare il mapping docker port net-demo # 3. Ottenere il PID del container CONTAINER_PID=$(docker inspect --format \u0026#39;{{.State.Pid}}\u0026#39; net-demo) # 4. Confrontare i network namespace ls -l /proc/1/ns/net ls -l /proc/$CONTAINER_PID/ns/net # 5. Testare la connessione telnet 127.0.0.1 8080 # Fallisce telnet 127.0.0.1 9090 # Funziona # 6. Usare nsenter per accedere al namespace del container nsenter --target $CONTAINER_PID --net telnet 127.0.0.1 8080 # Funziona Demo 3: CGroups e Limitazione Memoria Questa demo mostra come i cgroups limitano l\u0026rsquo;uso della memoria:\n# 1. Creare un cgroup con limite di memoria mkdir /sys/fs/cgroup/demo3_memory echo 104857600 \u0026gt; /sys/fs/cgroup/demo3_memory/memory.max echo 0 \u0026gt; /sys/fs/cgroup/demo3_memory/memory.swap.max # 2. Test normale (funziona) python3 -c \u0026#34;a = bytearray(200 * 1024 * 1024)\u0026#34; # 3. Spostare la shell nel cgroup echo $$ | sudo tee /sys/fs/cgroup/demo3_memory/cgroup.procs # 4. Test con limite (fallisce) python3 -c \u0026#34;a = bytearray(200 * 1024 * 1024)\u0026#34; # Output: Killed # 5. Verificare i log di sistema sudo dmesg | grep -i \u0026#34;Killed process\u0026#34; Conclusioni Docker rappresenta una rivoluzione nel deployment delle applicazioni, combinando efficienza, portabilità e semplicità d\u0026rsquo;uso. La comprensione dei meccanismi sottostanti - namespaces e cgroups - è fondamentale per utilizzare al meglio questa tecnologia.\nI namespaces forniscono l\u0026rsquo;isolamento necessario per far credere a ogni container di essere l\u0026rsquo;unico sul sistema, mentre i cgroups garantiscono che le risorse siano distribuite equamente e in modo controllato.\nQuesta combinazione rende Docker ideale per ambienti cloud-native, microservizi e pipeline CI/CD, dove l\u0026rsquo;agilità e l\u0026rsquo;efficienza sono requisiti fondamentali.\n","date":"July 13, 2025","hero":"/posts/docker-internals/hero.svg","permalink":"https://hugo-toha.github.io/posts/docker-internals/","summary":"\u003ch1 id=\"docker-e-linux-namespaces-guida-completa-alla-containerizzazione\"\u003eDocker e Linux Namespaces: Guida Completa alla Containerizzazione\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003ePubblicato in Marzo 2025 - di Francesco Montelli\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eLa containerizzazione ha rivoluzionato il modo in cui sviluppiamo e distribuiamo le applicazioni. In questo articolo esploreremo Docker e i meccanismi fondamentali che rendono possibile l\u0026rsquo;isolamento dei container: i \u003cstrong\u003enamespaces\u003c/strong\u003e e i \u003cstrong\u003ecgroups\u003c/strong\u003e di Linux.\u003c/p\u003e\n\u003ch2 id=\"cosè-docker\"\u003eCos\u0026rsquo;è Docker?\u003c/h2\u003e\n\u003cp\u003eDocker è una piattaforma open-source che semplifica lo sviluppo, la distribuzione e l\u0026rsquo;esecuzione delle applicazioni tramite l\u0026rsquo;uso di \u003cstrong\u003econtainer\u003c/strong\u003e. Un container è un\u0026rsquo;astrazione che permette di racchiudere un\u0026rsquo;applicazione e tutte le sue dipendenze in un ambiente isolato e portatile, eliminando le incompatibilità dovute alle differenti configurazioni dei sistemi host.\u003c/p\u003e","tags":["Basic","Multi-lingual"],"title":"Docker Internals"}]